//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 1 view controllers.
  struct segue {
    /// This struct is generated for `ArticleListVC`, and contains static references to 1 segues.
    struct articleListVC {
      /// Segue identifier `comments`.
      static let comments: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ArticleListVC, ArticleCommentsVC> = Rswift.StoryboardSegueIdentifier(identifier: "comments")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `comments`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func comments(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ArticleListVC, ArticleCommentsVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.articleListVC.comments, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `ArticleComments`.
    static let articleComments = _R.storyboard.articleComments()
    /// Storyboard `ArticleList`.
    static let articleList = _R.storyboard.articleList()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `SettingsVC`.
    static let settingsVC = _R.storyboard.settingsVC()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ArticleComments", bundle: ...)`
    static func articleComments(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.articleComments)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ArticleList", bundle: ...)`
    static func articleList(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.articleList)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SettingsVC", bundle: ...)`
    static func settingsVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settingsVC)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `primary`.
    static let primary = Rswift.ColorResource(bundle: R.hostingBundle, name: "primary")
    /// Color `secondary`.
    static let secondary = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondary")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primary, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondary", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondary(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondary, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 11 files.
  struct file {
    /// Resource file `Read Me.txt`.
    static let readMeTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "Read Me", pathExtension: "txt")
    /// Resource file `demo.css`.
    static let demoCss = Rswift.FileResource(bundle: R.hostingBundle, name: "demo", pathExtension: "css")
    /// Resource file `demo.html`.
    static let demoHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "demo", pathExtension: "html")
    /// Resource file `demo.js`.
    static let demoJs = Rswift.FileResource(bundle: R.hostingBundle, name: "demo", pathExtension: "js")
    /// Resource file `flamingo.ttf`.
    static let flamingoTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "flamingo", pathExtension: "ttf")
    /// Resource file `material-icons.svg`.
    static let materialIconsSvg = Rswift.FileResource(bundle: R.hostingBundle, name: "material-icons", pathExtension: "svg")
    /// Resource file `material-icons.ttf`.
    static let materialIconsTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "material-icons", pathExtension: "ttf")
    /// Resource file `material-icons.woff`.
    static let materialIconsWoff = Rswift.FileResource(bundle: R.hostingBundle, name: "material-icons", pathExtension: "woff")
    /// Resource file `selection.json`.
    static let selectionJson = Rswift.FileResource(bundle: R.hostingBundle, name: "selection", pathExtension: "json")
    /// Resource file `sources.json`.
    static let sourcesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "sources", pathExtension: "json")
    /// Resource file `style.css`.
    static let styleCss = Rswift.FileResource(bundle: R.hostingBundle, name: "style", pathExtension: "css")

    /// `bundle.url(forResource: "Read Me", withExtension: "txt")`
    static func readMeTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readMeTxt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "demo", withExtension: "css")`
    static func demoCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.demoCss
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "demo", withExtension: "html")`
    static func demoHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.demoHtml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "demo", withExtension: "js")`
    static func demoJs(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.demoJs
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "flamingo", withExtension: "ttf")`
    static func flamingoTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.flamingoTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "material-icons", withExtension: "svg")`
    static func materialIconsSvg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.materialIconsSvg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "material-icons", withExtension: "ttf")`
    static func materialIconsTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.materialIconsTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "material-icons", withExtension: "woff")`
    static func materialIconsWoff(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.materialIconsWoff
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "selection", withExtension: "json")`
    static func selectionJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.selectionJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sources", withExtension: "json")`
    static func sourcesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourcesJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "style", withExtension: "css")`
    static func styleCss(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.styleCss
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `flamingo`.
    static let flamingo = Rswift.FontResource(fontName: "flamingo")
    /// Font `material-icons`.
    static let materialIcons = Rswift.FontResource(fontName: "material-icons")

    /// `UIFont(name: "flamingo", size: ...)`
    static func flamingo(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: flamingo, size: size)
    }

    /// `UIFont(name: "material-icons", size: ...)`
    static func materialIcons(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: materialIcons, size: size)
    }

    static func validate() throws {
      if R.font.flamingo(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'flamingo' could not be loaded, is 'flamingo.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.materialIcons(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'material-icons' could not be loaded, is 'material-icons.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `RoundedIcon`.
    static let roundedIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "RoundedIcon")
    /// Image `circle`.
    static let circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle")
    /// Image `color_gradient_blue`.
    static let color_gradient_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "color_gradient_blue")
    /// Image `color_gradient`.
    static let color_gradient = Rswift.ImageResource(bundle: R.hostingBundle, name: "color_gradient")
    /// Image `flamingo-back`.
    static let flamingoBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "flamingo-back")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "RoundedIcon", bundle: ..., traitCollection: ...)`
    static func roundedIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.roundedIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "circle", bundle: ..., traitCollection: ...)`
    static func circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "color_gradient", bundle: ..., traitCollection: ...)`
    static func color_gradient(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.color_gradient, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "color_gradient_blue", bundle: ..., traitCollection: ...)`
    static func color_gradient_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.color_gradient_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "flamingo-back", bundle: ..., traitCollection: ...)`
    static func flamingoBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flamingoBack, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ArticleDefaultCell`.
    static let articleDefaultCell: Rswift.ReuseIdentifier<ArticleDefaultCell> = Rswift.ReuseIdentifier(identifier: "ArticleDefaultCell")
    /// Reuse identifier `CommentCell`.
    static let commentCell: Rswift.ReuseIdentifier<CommentCell> = Rswift.ReuseIdentifier(identifier: "CommentCell")
    /// Reuse identifier `SimpleTableCell`.
    static let simpleTableCell: Rswift.ReuseIdentifier<SimpleTableCell> = Rswift.ReuseIdentifier(identifier: "SimpleTableCell")
    /// Reuse identifier `SwitchTableCell`.
    static let switchTableCell: Rswift.ReuseIdentifier<SwitchTableCell> = Rswift.ReuseIdentifier(identifier: "SwitchTableCell")
    /// Reuse identifier `TitleSeparatorCell`.
    static let titleSeparatorCell: Rswift.ReuseIdentifier<TitleSeparatorCell> = Rswift.ReuseIdentifier(identifier: "TitleSeparatorCell")
    /// Reuse identifier `fake`.
    static let fake: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "fake")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 28 localization keys.
    struct localizable {
      /// en translation: Anonymous
      ///
      /// Locales: en
      static let articleCommentsCommentAnonymous = Rswift.StringResource(key: "ArticleComments/Comment/Anonymous", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Auto
      ///
      /// Locales: en
      static let settings_general_theme_auto = Rswift.StringResource(key: "settings_general_theme_auto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en
      static let commonCancel = Rswift.StringResource(key: "Common/Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Confirm
      ///
      /// Locales: en
      static let commonConfirm = Rswift.StringResource(key: "Common/Confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Continue
      ///
      /// Locales: en
      static let commonContinue = Rswift.StringResource(key: "Common/Continue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Couldn't load comments :(
      ///
      /// Locales: en
      static let articleCommentsLoadingFailed = Rswift.StringResource(key: "ArticleComments/LoadingFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Couldn't load feed :(
      ///
      /// Locales: en
      static let articlesListLoadingFailed = Rswift.StringResource(key: "ArticlesList/LoadingFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Dark
      ///
      /// Locales: en
      static let settings_general_theme_dark = Rswift.StringResource(key: "settings_general_theme_dark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en
      static let commonDelete = Rswift.StringResource(key: "Common/Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en
      static let commonDone = Rswift.StringResource(key: "Common/Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en
      static let commonError = Rswift.StringResource(key: "Common/Error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Export
      ///
      /// Locales: en
      static let commonExport = Rswift.StringResource(key: "Common/Export", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Light
      ///
      /// Locales: en
      static let settings_general_theme_light = Rswift.StringResource(key: "settings_general_theme_light", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Loading comments...
      ///
      /// Locales: en
      static let articleCommentsLoading = Rswift.StringResource(key: "ArticleComments/Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Move
      ///
      /// Locales: en
      static let commonMove = Rswift.StringResource(key: "Common/Move", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en
      static let commonNext = Rswift.StringResource(key: "Common/Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en
      static let commonNo = Rswift.StringResource(key: "Common/No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Nothing to show
      ///
      /// Locales: en
      static let flamingoErrorNothingToShow = Rswift.StringResource(key: "FlamingoError/NothingToShow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ok
      ///
      /// Locales: en
      static let commonOk = Rswift.StringResource(key: "Common/Ok", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Resume
      ///
      /// Locales: en
      static let commonResume = Rswift.StringResource(key: "Common/Resume", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en
      static let commonSave = Rswift.StringResource(key: "Common/Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en
      static let commonSelect = Rswift.StringResource(key: "Common/Select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en
      static let commonShare = Rswift.StringResource(key: "Common/Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Something went wrong
      ///
      /// Locales: en
      static let flamingoErrorUnknown = Rswift.StringResource(key: "FlamingoError/Unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Something went wrong :(
      ///
      /// Locales: en
      static let errorUnknown = Rswift.StringResource(key: "Error/Unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Stop
      ///
      /// Locales: en
      static let commonStop = Rswift.StringResource(key: "Common/Stop", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en
      static let commonYes = Rswift.StringResource(key: "Common/Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: You first need to configure the sources in "Settings"
      ///
      /// Locales: en
      static let flamingoErrorSourcesNotConfigured = Rswift.StringResource(key: "FlamingoError/SourcesNotConfigured", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: Anonymous
      ///
      /// Locales: en
      static func articleCommentsCommentAnonymous(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ArticleComments/Comment/Anonymous", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ArticleComments/Comment/Anonymous"
        }

        return NSLocalizedString("ArticleComments/Comment/Anonymous", bundle: bundle, comment: "")
      }

      /// en translation: Auto
      ///
      /// Locales: en
      static func settings_general_theme_auto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_general_theme_auto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings_general_theme_auto"
        }

        return NSLocalizedString("settings_general_theme_auto", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en
      static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Cancel"
        }

        return NSLocalizedString("Common/Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Confirm
      ///
      /// Locales: en
      static func commonConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Confirm"
        }

        return NSLocalizedString("Common/Confirm", bundle: bundle, comment: "")
      }

      /// en translation: Continue
      ///
      /// Locales: en
      static func commonContinue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Continue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Continue"
        }

        return NSLocalizedString("Common/Continue", bundle: bundle, comment: "")
      }

      /// en translation: Couldn't load comments :(
      ///
      /// Locales: en
      static func articleCommentsLoadingFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ArticleComments/LoadingFailed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ArticleComments/LoadingFailed"
        }

        return NSLocalizedString("ArticleComments/LoadingFailed", bundle: bundle, comment: "")
      }

      /// en translation: Couldn't load feed :(
      ///
      /// Locales: en
      static func articlesListLoadingFailed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ArticlesList/LoadingFailed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ArticlesList/LoadingFailed"
        }

        return NSLocalizedString("ArticlesList/LoadingFailed", bundle: bundle, comment: "")
      }

      /// en translation: Dark
      ///
      /// Locales: en
      static func settings_general_theme_dark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_general_theme_dark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings_general_theme_dark"
        }

        return NSLocalizedString("settings_general_theme_dark", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en
      static func commonDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Delete"
        }

        return NSLocalizedString("Common/Delete", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en
      static func commonDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Done"
        }

        return NSLocalizedString("Common/Done", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en
      static func commonError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Error"
        }

        return NSLocalizedString("Common/Error", bundle: bundle, comment: "")
      }

      /// en translation: Export
      ///
      /// Locales: en
      static func commonExport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Export", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Export"
        }

        return NSLocalizedString("Common/Export", bundle: bundle, comment: "")
      }

      /// en translation: Light
      ///
      /// Locales: en
      static func settings_general_theme_light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_general_theme_light", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings_general_theme_light"
        }

        return NSLocalizedString("settings_general_theme_light", bundle: bundle, comment: "")
      }

      /// en translation: Loading comments...
      ///
      /// Locales: en
      static func articleCommentsLoading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ArticleComments/Loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ArticleComments/Loading"
        }

        return NSLocalizedString("ArticleComments/Loading", bundle: bundle, comment: "")
      }

      /// en translation: Move
      ///
      /// Locales: en
      static func commonMove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Move", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Move"
        }

        return NSLocalizedString("Common/Move", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en
      static func commonNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Next"
        }

        return NSLocalizedString("Common/Next", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en
      static func commonNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/No"
        }

        return NSLocalizedString("Common/No", bundle: bundle, comment: "")
      }

      /// en translation: Nothing to show
      ///
      /// Locales: en
      static func flamingoErrorNothingToShow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FlamingoError/NothingToShow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FlamingoError/NothingToShow"
        }

        return NSLocalizedString("FlamingoError/NothingToShow", bundle: bundle, comment: "")
      }

      /// en translation: Ok
      ///
      /// Locales: en
      static func commonOk(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Ok", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Ok"
        }

        return NSLocalizedString("Common/Ok", bundle: bundle, comment: "")
      }

      /// en translation: Resume
      ///
      /// Locales: en
      static func commonResume(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Resume", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Resume"
        }

        return NSLocalizedString("Common/Resume", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en
      static func commonSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Save"
        }

        return NSLocalizedString("Common/Save", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en
      static func commonSelect(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Select"
        }

        return NSLocalizedString("Common/Select", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en
      static func commonShare(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Share"
        }

        return NSLocalizedString("Common/Share", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong
      ///
      /// Locales: en
      static func flamingoErrorUnknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FlamingoError/Unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FlamingoError/Unknown"
        }

        return NSLocalizedString("FlamingoError/Unknown", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong :(
      ///
      /// Locales: en
      static func errorUnknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error/Unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error/Unknown"
        }

        return NSLocalizedString("Error/Unknown", bundle: bundle, comment: "")
      }

      /// en translation: Stop
      ///
      /// Locales: en
      static func commonStop(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Stop", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Stop"
        }

        return NSLocalizedString("Common/Stop", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en
      static func commonYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common/Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common/Yes"
        }

        return NSLocalizedString("Common/Yes", bundle: bundle, comment: "")
      }

      /// en translation: You first need to configure the sources in "Settings"
      ///
      /// Locales: en
      static func flamingoErrorSourcesNotConfigured(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("FlamingoError/SourcesNotConfigured", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "FlamingoError/SourcesNotConfigured"
        }

        return NSLocalizedString("FlamingoError/SourcesNotConfigured", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try articleComments.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try articleList.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settingsVC.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct articleComments: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ArticleCommentsVC

      let articleCommentsVC = StoryboardViewControllerResource<ArticleCommentsVC>(identifier: "ArticleCommentsVC")
      let bundle = R.hostingBundle
      let name = "ArticleComments"

      func articleCommentsVC(_: Void = ()) -> ArticleCommentsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articleCommentsVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.articleComments().articleCommentsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articleCommentsVC' could not be loaded from storyboard 'ArticleComments' as 'ArticleCommentsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct articleList: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ArticleListVC

      let articleListVC = StoryboardViewControllerResource<ArticleListVC>(identifier: "ArticleListVC")
      let bundle = R.hostingBundle
      let name = "ArticleList"

      func articleListVC(_: Void = ()) -> ArticleListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: articleListVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle' is used in storyboard 'ArticleList', but couldn't be loaded.") }
        if UIKit.UIImage(named: "color_gradient", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'color_gradient' is used in storyboard 'ArticleList', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.articleList().articleListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'articleListVC' could not be loaded from storyboard 'ArticleList' as 'ArticleListVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "RoundedIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RoundedIcon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainTabController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settingsVC: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingsVC

      let bundle = R.hostingBundle
      let name = "SettingsVC"
      let settingsVC = StoryboardViewControllerResource<SettingsVC>(identifier: "SettingsVC")

      func settingsVC(_: Void = ()) -> SettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primary", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primary' is used in storyboard 'SettingsVC', but couldn't be loaded.") }
        }
        if _R.storyboard.settingsVC().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'SettingsVC' as 'SettingsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
